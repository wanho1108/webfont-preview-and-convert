<!DOCTYPE html>
<html lang="ko">
<head>
  <%- include('./includes/head'); -%>
  <style type="text/css">
    .box {
      height: 500px;
      padding: 30px;
    }
    .box__dragndrop,
    .box__uploading,
    .box__success,
    .box__error {
      display: none;
    }
    .box.has-support-advanced-upload {
      background-color: white;
      outline: 2px dashed black;
    }
    .box.has-support-advanced-upload .box__dragndrop {
      display: inline;
    }
    .box.is-dragover {
      background-color: grey;
    }
    .box.is-uploading .box__input {
      visibility: none;
    }
    .box.is-uploading .box__uploading {
      display: block;
    }
    .box.is-success .box__success {
      display: block;
    }
    .box.is-error .box__error {
      display: block;
    }
  </style>
</head>
<body>
  <%- include('./includes/header'); -%>
  <div id="content">
    <form class="box" method="post" action="" enctype="multipart/form-data">
      <div class="box__input">
        <input class="box__file" type="file" name="file[]" id="file" data-multiple-caption="{count} files selected"
          multiple />
        <label for="file"><strong>Choose a file</strong><span class="box__dragndrop"> or drag it here</span>.</label>
        <button class="box__button" type="submit">Upload</button>
      </div>
      <div class="box__uploading">Uploading&hellip;</div>
      <div class="box__success">Done!</div>
      <div class="box__error">Error! <span></span>.</div>
    </form>
  </div>
  <script>
    const isSupportAdvancedUpload = (() => {
      const div = document.createElement('div');

      return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
    })();

    const $form = document.querySelector('.box');

    if (isSupportAdvancedUpload) {

      $form.classList.add('has-support-advanced-upload');

      function showFiles(files) {
        const $input = $form.querySelector('input[type="file"]');
        const $label = $form.querySelector('label');
        $label.textContent = files.length > 1 ? $input.getAttribute('data-multiple-caption').replace('{count}', files.length) : files[0].name;
      }

      let droppedFiles = false;
      const dragInitEvent = (e) => {
        e.preventDefault();
        e.stopPropagation();
      }
      const dragOverEvent = (e) => {
        e.preventDefault();
        e.stopPropagation();
        $form.classList.add('is-dragover');
      };
      const dragDropEvent = (e) => {
        e.preventDefault();
        e.stopPropagation();
        $form.classList.remove('is-dragover');
      };
      const fileUpload = (e) => {
        if (e) e.preventDefault();

        if ($form.classList.contains('is-uploading')) return false;

        $form.classList.add('is-uploading');
        $form.classList.remove('is-uploading');

        const ajaxData = new FormData($form);

        if (droppedFiles) {
          for (const file of droppedFiles) {
            ajaxData.append($form.querySelector('input[type="file"]').getAttribute('name'), file);
          }
        }

        const xhr = new XMLHttpRequest();
        xhr.open('POST', '/upload');
        // xhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary="Boundary"');
        // xhr.setRequestHeader('Accept', 'application/json');
        xhr.send(ajaxData);
        xhr.onreadystatechange = (e) => {
          console.log('onreadystatechange', xhr.readyState);
          if (xhr.readyState === xhr.DONE) {
            const division = document.createElement('div');
            division.innerHTML = xhr.responseText;
            const style = division.querySelector('style');
            const template = division.querySelector('template');
            document.head.appendChild(style);
            document.querySelector('#content').innerHTML = template.innerHTML;
          }
        };
        // xhr.onload = (e) => {
          // console.log(xhr.responseText);
          // if (xhr.readyState !== XMLHttpRequest.DOEN) return;
          // console.log('change');
          // if (xhr.status === 200) {
          //   // 성공
          //   droppedFiles = false;
          //   $form.classList.add('is-success');
          //   console.log('change 200');
          // } else {
          //   // 실패
          //   droppedFiles = false;
          //   $form.classList.add('is-error');
          //   console.log('change error');
          // }
        // }
      };
      $form.addEventListener('submit', fileUpload);
      $form.addEventListener('drag', dragInitEvent);
      $form.addEventListener('dragstart', dragInitEvent);
      $form.addEventListener('dragover', dragOverEvent);
      $form.addEventListener('dragenter', dragOverEvent);
      $form.addEventListener('dragleave', dragDropEvent);
      $form.addEventListener('dragend', dragDropEvent);
      $form.addEventListener('drop', (e) => {
        dragDropEvent(e);
        droppedFiles = e.dataTransfer.files;
        showFiles(droppedFiles);
        fileUpload();
      });


    }
  </script>
  <%- include('./includes/script'); -%>
</body>
</html>